/*
V1.1
Wiring
RC522     Nodemcu8266      esp12f
3V        3V                3V
RST       D1                io5
GND       GND               GND
Miso      D6                io12
Mosi      D7                io13
SCK       D5                io14
SDA       D2                io4

*/

/*
Bahan
- RC522
- Esp12f
- Resistor 10K 2pcs
- ams1117 3v3

Catatan
- pull up pin EN (enable)
- pull Down ping Gpio 15 (chip select)

opsional
- pull up pin Gpio0 dan pin Reset


*/


#define SS_PIN D2
#define RST_PIN D1
#define BUZZER D8

#include <SPI.h>
#include <MFRC522.h>
#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>

// Replace with your network credentials
const char* ssid = "OTA";
const char* password = "";

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.
bool statusRelay = false;
unsigned long previousMillis = 0;  // menyimpan waktu sebelumnya
const long interval = 600000;      // interval waktu (10 menit dalam milidetik)
unsigned long reconnectPreviousMillis = 0;  // waktu terakhir percobaan reconnect
const long reconnectInterval = 1000;        // interval untuk mencoba reconnect (1 detik)

void setup() 
{
  // Initialize serial communication
  Serial.begin(115200);
  Serial.println("Sukses");

  // Initialize WiFi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    Serial.println("Connecting to WiFi...");
    delay(1000);
  }

  // Initialize OTA updates
  ArduinoOTA.onStart([]() {
    Serial.println("Start");
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
    else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
    else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
    else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
    else if (error == OTA_END_ERROR) Serial.println("End Failed");
  });
  ArduinoOTA.begin();
  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // Initialize MFRC522
  SPI.begin();          
  mfrc522.PCD_Init();

  // Initialize pins
  pinMode(BUZZER, OUTPUT);
  for(int i = 0; i < 3; i++) {
    digitalWrite(BUZZER, HIGH);
    delay(200);
    digitalWrite(BUZZER, LOW);
    delay(200);
  }
  pinMode(D4, OUTPUT);
  digitalWrite(D4, LOW);
}

void loop() 
{
  unsigned long currentMillis = millis();
  // Handle OTA updates
  ArduinoOTA.handle();

  // Reconnect to WiFi if disconnected

  // Periksa status WiFi dan lakukan reconnect jika perlu setiap 10 menit
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;  // perbarui waktu sebelumnya

    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("WiFi not connected! Reconnecting...");
      WiFi.begin(ssid, password);
    }
  }

  // Jika WiFi tidak terhubung, coba reconnect setiap detik
  if (WiFi.status() != WL_CONNECTED) {
    if (currentMillis - reconnectPreviousMillis >= reconnectInterval) {
      reconnectPreviousMillis = currentMillis;
      Serial.println("Reconnecting to WiFi...");
      WiFi.begin(ssid, password);
    }
  } else {
    // Reset timer jika WiFi sudah terhubung
    reconnectPreviousMillis = 0;
  }

  // Look for new cards
  if (!mfrc522.PICC_IsNewCardPresent()) 
  {
    return;
  }
  // Select one of the cards
  if (!mfrc522.PICC_ReadCardSerial()) 
  {
    return;
  }

  // Show UID on serial monitor
  Serial.println();
  Serial.print("UID tag: ");
  String content = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) 
  {
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
    Serial.print(mfrc522.uid.uidByte[i], HEX);
    content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
    content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  content.toUpperCase();
  Serial.println();

  // Check if the UID matches known tags
  if (content.substring(1) == "D3 E4 33 10" ||
      content.substring(1) == "96 21 7F 5F" ||
      content.substring(1) == "73 63 CB FE" ||
      content.substring(1) == "97 C1 B7 89") 
  {
    prosesRelay();
    delay(1000);
  } 
  else 
  {
    Serial.println("Access Denied");
    delay(1000);
  }
}

void prosesRelay()
{
  if (statusRelay)
  {
    digitalWrite(D4, LOW);
    statusRelay = false;
    for (int i = 0; i < 1; i++)
    {
      tone(BUZZER, 2500);
      delay(100);
      noTone(BUZZER);
      delay(50);
      tone(BUZZER, 3000);
      delay(100);
      noTone(BUZZER);
      delay(50);
    }
  }
  else
  {
    digitalWrite(D4, HIGH);
    statusRelay = true;
    tone(BUZZER, 3000);
    delay(100);
    noTone(BUZZER);
    delay(50);
    tone(BUZZER, 2500);
    delay(100);
    noTone(BUZZER);
    delay(50);
  }
}
